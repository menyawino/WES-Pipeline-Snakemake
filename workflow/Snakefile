############################
####### Loading data #######
############################

# import necessary modules to process sample data
from scripts.sample_processing import get_sample_data
import os

# add sample file here
samplesfile = "/mnt/omar/pipelines/icc/pipeline/samples.csv"

# get input directory
configfile: "workflow/config.yml"
inputdir = config["inputdir"]

# get sample data
samples_data = get_sample_data(samplesfile, inputdir)

# make lists for needed data
# get sample mrn without the _S17 in for example 20AD07372_S17_L001_R1_001.fastq.gz
sample_mrn = samples_data['sample'].unique().tolist()
sample_mrn = [x.split('_')[0] for x in sample_mrn]
lane = samples_data['lane'].unique().tolist()
read = samples_data['read'].unique().tolist()


sample_filename = samples_data['sample'].unique().tolist()

# concatenate the sample and sample_filename lists such that each element is a string of {sample}/{sample_filename}
sample_filename = [f"{x}/{y}" for x, y in zip(sample_mrn, sample_filename)]

wildcard_constraints:
    sample_mrn= '|'.join([re.escape(x) for x in sample_mrn]),
    lane= '|'.join([re.escape(x) for x in lane]),
    read= '|'.join([re.escape(x) for x in read]),
    sample_filename= '|'.join([re.escape(x) for x in sample_filename])

############################
####### Configuration ######
############################

# change this parameter to the path of the config file using
# set automatically by the python wrapper script

configfile: "workflow/config.yml"

############################
####### Include rules ######
############################

include: "rules/001_qc.smk"
include: "rules/002_trimming.smk"
include: "rules/003_posttrim_qc.smk"
include: "rules/004_alignment.smk"
include: "rules/005_variant_calling.smk"
include: "rules/006_variant_filtering.smk"
include: "rules/007_annotation.smk"
include: "rules/008_summary.smk"

############################
######### Workflow #########
############################
rule all:
    input:
        expand(rules.raw_fastqc.output.html, sample_filename=sample_filename, lane=lane, R=read),
        expand(rules.trimming.output.fw, sample=sample_filename, lane=lane),


# delete samples_data.csv with python
# os.remove("sample_data.csv")
